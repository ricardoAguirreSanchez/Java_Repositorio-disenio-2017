package com.utn.reglas;
import com.utn.model.Metodologia;
import com.utn.reglas.Respuesta
import org.springframework.beans.factory.annotation.Autowired
import com.utn.repositorio.Empresas
import com.utn.processor.EmpresasProcessor;


// regla para la condicion Maximizar ROE
// Busca la empresa que sumando los ROE de todas sus cuentas sea la mejor de los ultimos 10 a침os
rule "Maximizar ROE"
	
    when
    	metodologia: Metodologia(metodologia.getListaCondiciones().contains("Maximizar ROE"));
        respuesta: Respuesta();
        
    then

    	EmpresasProcessor processor = new EmpresasProcessor();
    	respuesta.agregar("Maximizar ROE", processor.getEmpresaMejorROE());
    	
end

// regla para la condicion Minimizar nivel de deuda
// Busca la empresa con el menor nivel de deuda, entiendase nivel de deuda por la division de totalPasivo / capitalContable
rule "Minimizar deuda"
	
    when
        metodologia: Metodologia(metodologia.getListaCondiciones().contains("Minimizar deuda"));
        respuesta: Respuesta();
    then 
    	EmpresasProcessor processor = new EmpresasProcessor();
    	respuesta.agregar("Minimizar deuda",processor.getEmpresaMenorDeuda());
end

// regla para la condicion M치rgenes consistentemente crecientes
// Busca la empresa con mejor margen de ganancia, entendimos margen de ganancia como el total pasivo menos los costos 
// (costos q estan por cuenta, tomando en cuenta el periodo de los ultimos 10 a침os)
rule "Margenes de ganancia"
	
    when
    	metodologia: Metodologia(metodologia.getListaCondiciones().contains("Margenes de ganancia"));
        respuesta: Respuesta();
        
    then
    	EmpresasProcessor processor = new EmpresasProcessor();
    	respuesta.agregar("Margenes de ganancia",processor.getEmpresaMejorMargen());
    	
end

// regla para la condicion Longevidad
// Busca la empresa mas antigua entre todas y ademas q como minimo pasen los 10 a침os
rule "Longevidad"
	
    when
    	metodologia: Metodologia(metodologia.getListaCondiciones().contains("Longevidad"));
        respuesta: Respuesta();
        
    then 
    	EmpresasProcessor processor = new EmpresasProcessor();
    	respuesta.agregar("Longevidad",processor.getEmpresaMasAntigua());
end




//REGLAS EXTRAS POR SI LO USAMOS

//Busca la empresa con total pasivo maximo
rule "Maximo total pasivo"
	
    when
    	metodologia: Metodologia(metodologia.getListaCondiciones().contains("Maximo total pasivo"));
        respuesta: Respuesta();
        
    then 
    	EmpresasProcessor processor = new EmpresasProcessor();
    	respuesta.agregar("Maximo total pasivo",processor.getEmpresaMaximoTotalPasivo());
end

//Busca la empresa con mas cantidad de cuentas
rule "Maxima cantidad cuentas"
	
    when
    	metodologia: Metodologia(metodologia.getListaCondiciones().contains("Maxima cantidad cuentas"));
        respuesta: Respuesta();
        
    then 
    	EmpresasProcessor processor = new EmpresasProcessor();
    	respuesta.agregar("Maxima cantidad cuentas",processor.getEmpresaMaximaCantidadCuentas());
end

//Busca la empresa con menor capital contable
rule "Menor capital contable"
	
    when
    	metodologia: Metodologia(metodologia.getListaCondiciones().contains("Menor capital contable"));
        respuesta: Respuesta();
        
    then 
    	EmpresasProcessor processor = new EmpresasProcessor();
    	respuesta.agregar("Menor capital contable",processor.getEmpresaMenorCapitalContable());
end
